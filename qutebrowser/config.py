# Autogenerated config.py
#
# NOTE: This file has been manually cleaned and optimized.

# --- IMPORTS ---
import shutil

# Find the absolute path to executables, falling back to simple name if not found.
MPV_PATH = shutil.which("mpv") or "mpv"
TERMINATOR_PATH = shutil.which("terminator") or "terminator"
NVIM_PATH = shutil.which("nvim") or "nvim"
WOFI_PATH = shutil.which("wofi") or "wofi"
# --- Final Proprietary Media Flag ---
# This flag tells Chromium to use the full, proprietary FFmpeg library features.


# --- Video Playback Stability Fixes ---

# FIX 1: Disable hardware acceleration for 2D canvas drawing.
# Reverting this setting to its default 'auto' state, as the custom fix did not resolve the core FFmpeg Demuxer error.
# We keep this setting in the config for ease of future modification.
# config.set("qt.workarounds.disable_accelerated_2d_canvas", "auto")

# FIX 2: Removing proprietary codecs and GPU flags, as these failed to fix the H.264 metadata parsing issue.
# The custom Qt build is now running, but these flags do not resolve the Demuxer bug.
# c.qt.args.append('--enable-proprietary-codecs') # Removed
# c.qt.args.append('--disable-gpu-rasterization') # Removed
# c.qt.args.append('--disable-gpu') # Removed

# FIX 3: Disable Wayland GPU compositing (Optional, but helps with screen tearing/freezes)
# Uncomment the line below if you experience crashes or severe freezing.
# config.set("qt.workarounds.disable_wayland_compositing", True)

# --- Global Settings ---
# Do NOT load settings configured via the graphical autoconfig.yml
config.load_autoconfig(False)
c.qt.args = [
    "--ignore-gpu-blocklist",
    "--enable-accelerated-video-decode",
    "--enable-features=VaapiVideoDecoder",
]

# Hide Window Border
config.set("window.hide_decoration", True)

# Set Editor to nvim (using Terminator as the terminal emulator)
config.set(
    "editor.command",
    [TERMINATOR_PATH, "-x", NVIM_PATH, "{file}", "-c", "normal {line}G{column0}l"],
)

# Dark Mode and Color Scheme
c.colors.webpage.preferred_color_scheme = "dark"
c.colors.webpage.darkmode.enabled = True


# --- Ad-Blocking Configuration ---
# Enable ad-blocking globally and use the advanced 'both' method
c.content.blocking.enabled = True
c.content.blocking.method = "both"

# Standard ABP-style filter lists (uBlock Origin lists)
c.content.blocking.adblock.lists = [
    # Core Ad Blocking
    "https://ublockorigin.github.io/uAssets/filters/filters.txt",
    "https://ublockorigin.github.io/uAssets/thirdparties/easylist.txt",
    # Privacy and Tracking
    "https://ublockorigin.github.io/uAssets/filters/privacy.txt",
    "https://ublockorigin.github.io/uAssets/thirdparties/easyprivacy.txt",
    # Badware/Malware Protection
    "https://ublockorigin.github.io/uAssets/filters/badware.txt",
    "https://malware-filter.gitlab.io/urlhaus-filter/urlhaus-filter-ag-online.txt",
    # "file:///home/lucky/.config/qutebrowser/adblock-fixes.txt",
]

# FIX: Whitelist the asset CDN (assets.sb-cd.com) to allow video player scripts to load
c.content.blocking.whitelist.append("https://assets.sb-cd.com/*")
# c.content.blocking.whitelist.append("https://gemini.google.com/*")
# c.content.blocking.whitelist.append("https://www.googletagmanager.com/*")
# c.content.blocking.whitelist.append("https://play.google.com/*")
# c.content.blocking.whitelist.append("www.google-analytics.com/*")
# c.content.blocking.whitelist.append("www.google.com/*")
# c.content.blocking.whitelist.append("https://maps.googleapis.com/*")

# Export qutebrowser cookies to a file
# config.bind("<z>c", "spawn --userscript export_cookies.py", mode="normal")
config.bind(
    "<z>c",
    "spawn --userscript /home/lucky/.config/qutebrowser/userscripts/export-cookies.py",
    mode="normal",
)

# --- MPV Bindings and External Commands ---
# Bind to the direct stream extraction userscript (the reliable method for anti-adblock sites)
# config.bind(",v", "spawn --userscript mpv-direct-stream.py", mode="normal")
config.bind(
    ",v",
    "spawn --userscript /home/lucky/.config/qutebrowser/userscripts/mpv-direct-stream.py",
    mode="normal",
)
# The binding needs to be in 'normal' mode, but the command needs 'hint'
config.bind(
    ";v",
    "hint links spawn --userscript /home/lucky/.config/qutebrowser/userscripts/mpv-direct-stream.py {hint-url}",
)

# --- qute-pass Bindings ---
# Dynamically find the path to wofi and format the dmenu invocation string
wofi_invocation = f" --dmenu-invocation {WOFI_PATH}"
# Full Login (Username + Password)
config.bind("<z><l>", f"spawn --userscript qute-pass{wofi_invocation}", mode="normal")
# Username Only
config.bind(
    "<z><u><l>",
    f"spawn --userscript qute-pass --username-only{wofi_invocation}",
    mode="normal",
)
# Password Only
config.bind(
    "<z><p><l>",
    f"spawn --userscript qute-pass --password-only{wofi_invocation}",
    mode="normal",
)
# OTP Only
config.bind(
    "<z><o><l>",
    f"spawn --userscript qute-pass --otp-only{wofi_invocation}",
    mode="normal",
)


# --- Developer/Internal URL Overrides (Standard, Consolidated) ---
DEV_URLS = ["chrome-devtools://*", "devtools://*", "chrome://*/*", "qute://*/*"]

# Necessary overrides for internal/devtools pages to function
for url in DEV_URLS:
    config.set("content.cookies.accept", "all", url)
    config.set("content.images", True, url)
    config.set("content.javascript.enabled", True, url)


# --- Site-Specific User Agent Overrides ---
config.set(
    "content.headers.user_agent",
    "Mozilla/5.0 ({os_info}) AppleWebKit/{webkit_version} (KHTML, like Gecko) {upstream_browser_key}/{upstream_browser_version} Safari/{webkit_version}",
    "https://web.whatsapp.com/",
)
config.set(
    "content.headers.user_agent",
    "Mozilla/5.0 ({os_info}; rv:90.0) Gecko/20100101 Firefox/90.0",
    "https://accounts.google.com/*",
)
config.set(
    "content.headers.user_agent",
    "Mozilla/5.0 ({os_info}) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99 Safari/537.36",
    "https://*.slack.com/*",
)
config.set("content.headers.accept_language", "", "https://matchmaker.krunker.io/*")
