#!/usr/bin/env python3

"""
Qutebrowser Cookie Exporter: Python Version

Exports Qutebrowser's WebEngine cookies.sqlite database into the Netscape
format required by yt-dlp/mpv for authenticated streaming.
"""

import os
import sqlite3
import sys
import time
from typing import Optional

# --- Configuration ---
QUTE_DATA_DIR = os.getenv(
    "QUTE_DATA_DIR", os.path.expanduser("~/.local/share/qutebrowser")
)

# --- CRITICAL CHANGE: Use the discovered path ---
# The active cookie database file is named 'Cookies' (with a capital C and no .sqlite extension)
COOKIES_DB = os.path.join(
    QUTE_DATA_DIR, "webengine", "Cookies"
)  # <-- THIS IS THE FIXED PATH
# ------------------------------------------------

OUTPUT_FILE = "/tmp/qute_cookies.txt"

# --- Qutebrowser Communication Helper ---


def qute_command(command: str):
    """Writes a command to qutebrowser's FIFO pipe for message passing."""
    try:
        fifo_path = os.environ.get("QUTE_FIFO")
        if fifo_path:
            with open(fifo_path, "w") as fifo:
                fifo.write(command + "\n")
        else:
            # If QUTE_FIFO is not set, print the command/error to stderr
            print(f"[FIFO] {command}", file=sys.stderr)
    except Exception as e:
        print(f"Error writing to FIFO: {e}", file=sys.stderr)


# --- SQLite Logic ---


def get_cookie_data() -> Optional[list]:
    """Connects to the SQLite database and executes the cookie extraction query."""
    if not os.path.exists(COOKIES_DB):
        qute_command(f"message-error 'Cookie database not found at: {COOKIES_DB}'")
        return None

    try:
        conn = sqlite3.connect(COOKIES_DB)
        cursor = conn.cursor()

        # The core SQL query to select and format cookie data.
        # CRITICAL FIX: Removed 'is_session' and simplified the WHERE clause
        # based on columns known to exist in newer QtWebEngine versions.
        SQL_QUERY = """
        SELECT
            CASE WHEN host_key LIKE '.%' THEN host_key ELSE '.' || host_key END AS domain,
            'TRUE' AS flag,
            path,
            is_secure,
            CAST(expires_utc / 1000000 - 11644473600 AS INTEGER) AS expiry,
            name,
            value
        FROM
            cookies
        WHERE
            -- We remove 'is_session = 0' as it doesn't exist in the table.
            -- We rely on cookies having a valid expiry date.
            expiry > 0;
        """
        cursor.execute(SQL_QUERY)

        return cursor.fetchall()

    except sqlite3.Error as e:
        qute_command(f"message-error 'SQLite Error: {e}'")
        return None

    finally:
        if conn:
            conn.close()


def format_and_write_cookies(data: list) -> bool:
    """Formats the raw SQLite data into the Netscape standard and writes to file."""
    try:
        with open(OUTPUT_FILE, "w") as f:
            # Write Netscape file header
            f.write("# Netscape HTTP Cookie File\n")
            f.write(f"# Generated by Qutebrowser Python Exporter on {time.ctime()}\n")
            f.write("#\n")

            for row in data:
                (domain, flag, path, is_secure, expiry, name, value) = row

                # is_secure is an integer (0 or 1); convert to Netscape boolean strings.
                secure_str = "TRUE" if is_secure == 1 else "FALSE"

                # Format: domain | flag | path | secure | expiry | name | value
                line = "\t".join(
                    map(str, [domain, flag, path, secure_str, expiry, name, value])
                )
                f.write(line + "\n")

        # Check if the file was created and is not empty
        if os.path.getsize(OUTPUT_FILE) > 0:
            return True
        else:
            return False

    except Exception as e:
        qute_command(f"message-error 'File Write Error: {e}'")
        return False


# --- Main Execution ---


def main():
    cookie_data = get_cookie_data()

    if not cookie_data:
        # Error already handled in get_cookie_data
        return

    if format_and_write_cookies(cookie_data):
        qute_command(
            f"message-info 'Successfully exported {len(cookie_data)} cookies to {OUTPUT_FILE}'"
        )
    else:
        qute_command(
            f"message-error 'Failed to export cookies or file is empty: {OUTPUT_FILE}'"
        )


if __name__ == "__main__":
    main()
